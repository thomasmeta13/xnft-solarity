import { Event, RpcRequest } from "@coral-xyz/common-public";
export declare const ReactXnft: {
    events: import("eventemitter3")<string | symbol, any>;
    render(reactNode: any): void;
    renderWidget(reactNode: any): void;
};
export declare function reconcilerRender(reactNode: any): void;
export declare type RootContainer = {
    host: Host;
    children: Element[];
};
export declare type Host = {
    nextId: () => number;
};
export declare const HOST: Host;
declare type Style = any;
export declare type NodeSerialized = TableNodeSerialized | TableRowNodeSerialized | TextNodeSerialized | TextFieldNodeSerialized | ImageNodeSerialized | ViewNodeSerialized | ButtonNodeSerialized | LoadingNodeSerialized | ScrollBarNodeSerialized | SvgNodeSerialized | PathNodeSerialized | CircleNodeSerialized | IframeNodeSerialized | NavAnimationNodeSerialized | BalancesTableNodeSerialized | BalancesTableHeadNodeSerialized | BalancesTableContentNodeSerialized | BalancesTableRowNodeSerialized | BalancesTableCellNodeSerialized | BalancesTableFooterNodeSerialized;
export declare enum NodeKind {
    Table = "Table",
    TableRow = "TableRow",
    Text = "Text",
    TextField = "TextField",
    Image = "Image",
    View = "View",
    Button = "Button",
    Loading = "Loading",
    ScrollBar = "ScrollBar",
    Svg = "Svg",
    Path = "Path",
    Circle = "Circle",
    Iframe = "Iframe",
    NavAnimation = "NavAnimation",
    BalancesTable = "BalancesTable",
    BalancesTableHead = "BalancesTableHead",
    BalancesTableContent = "BalancesTableContent",
    BalancesTableRow = "BalancesTableRow",
    BalancesTableCell = "BalancesTableCell",
    BalancesTableFooter = "BalancesTableFooter"
}
declare type TableNodeSerialized = DefNodeSerialized<NodeKind.Table, TableProps>;
declare type TableProps = {
    style: Style;
    children: undefined;
};
declare type TableRowNodeSerialized = DefNodeSerialized<NodeKind.TableRow, TableRowProps>;
declare type TableRowProps = {
    style: Style;
    children: undefined;
};
declare type TextNodeSerialized = DefNodeSerialized<NodeKind.Text, TextProps>;
declare type TextProps = {
    style: Style;
    children: undefined;
};
declare type TextFieldNodeSerialized = DefNodeSerialized<NodeKind.TextField, TextFieldProps>;
declare type TextFieldProps = {
    onChange?: ((event: Event) => void) | boolean;
    value?: any;
    placeholder?: string;
    style: Style;
    children: undefined;
};
declare type ImageNodeSerialized = DefNodeSerialized<NodeKind.Image, ImageProps>;
declare type ImageProps = {
    style: Style;
    onClick?: (() => Promise<void>) | boolean;
    children: undefined;
    src: string;
};
declare type ViewNodeSerialized = DefNodeSerialized<NodeKind.View, ViewProps>;
declare type ViewProps = {
    onClick?: (() => Promise<void>) | boolean;
    style: Style;
    children: undefined;
};
declare type ButtonNodeSerialized = DefNodeSerialized<NodeKind.Button, ButtonProps>;
declare type ButtonProps = {
    onClick?: (() => Promise<void>) | boolean;
    style: Style;
    children: undefined;
};
declare type LoadingNodeSerialized = DefNodeSerialized<NodeKind.Loading, LoadingProps>;
declare type LoadingProps = {
    style: Style;
    children: undefined;
};
declare type ScrollBarNodeSerialized = DefNodeSerialized<NodeKind.ScrollBar, ScrollBarProps>;
declare type ScrollBarProps = {
    style: Style;
    children: undefined;
};
declare type SvgNodeSerialized = DefNodeSerialized<NodeKind.Svg, SvgProps>;
declare type SvgProps = {
    width: string;
    height: string;
    viewBox: string;
    fill: string;
    children: undefined;
    style: Style;
};
declare type PathNodeSerialized = DefNodeSerialized<NodeKind.Path, PathProps>;
declare type PathProps = {
    d: string;
    fill: string;
    fillRule?: string;
    clipRule?: string;
    stroke?: string;
};
declare type CircleNodeSerialized = DefNodeSerialized<NodeKind.Circle, CircleProps>;
declare type CircleProps = {
    cx: string;
    cy: string;
    r: string;
    fill: string;
    stroke: string;
    strokeWidth: string;
    pathLength: string;
    strokeDasharray: string;
    strokeDashoffset: string;
};
declare type IframeNodeSerialized = DefNodeSerialized<NodeKind.Iframe, IframeProps>;
declare type IframeProps = {
    style: Style;
    children: undefined;
    width: string;
    height: string;
    xnft: boolean;
};
declare type NavAnimationNodeSerialized = DefNodeSerialized<NodeKind.NavAnimation, NavAnimationProps>;
declare type NavAnimationProps = {
    routeName: string;
    navAction: string;
    style: undefined;
    children: undefined;
};
export declare type TextSerialized = {
    id: number;
    kind: "raw";
    text: string | number;
    props: undefined;
    style: undefined;
};
declare type BalancesTableNodeSerialized = DefNodeSerialized<NodeKind.BalancesTable, BalancesTableProps>;
declare type BalancesTableProps = {
    style: Style;
    children: undefined;
};
declare type BalancesTableHeadNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableHead, BalancesTableHeadProps>;
declare type BalancesTableHeadProps = {
    style: Style;
    title: string;
    iconUrl: string;
    children: undefined;
};
declare type BalancesTableContentNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableContent, BalancesTableContentProps>;
declare type BalancesTableContentProps = {
    style: Style;
    children: undefined;
};
declare type BalancesTableRowNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableRow, BalancesTableRowProps>;
declare type BalancesTableRowProps = {
    onClick?: (() => Promise<void>) | boolean;
    style: Style;
    children: undefined;
};
declare type BalancesTableCellNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableCell, BalancesTableCellProps>;
declare type BalancesTableCellProps = {
    icon?: string;
    title?: string;
    subtitle?: string;
    usdValue?: number;
    percentChange?: number;
    style: Style;
    children: undefined;
};
declare type BalancesTableFooterNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableFooter, BalancesTableFooterProps>;
declare type BalancesTableFooterProps = {
    style: Style;
    children: undefined;
};
export declare type Element = NodeSerialized | TextSerialized;
export declare type ElementPointer = {
    id: number;
    children?: Array<ElementPointer>;
};
declare type DefNodeSerialized<K, P> = {
    id: number;
    kind: K;
    props: P;
    style: Style;
    children: Array<Element>;
};
export declare type UpdateDiff = any;
export declare class ReconcilerBridgeManager {
    private static _renderId;
    static bridge(req: RpcRequest): void;
    private static _nextRenderId;
}
export {};
//# sourceMappingURL=reconciler.d.ts.map